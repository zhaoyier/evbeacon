{"version":3,"sources":["webpack:///./src/containers/views/SocketDebugger/Handler/index.scss","webpack:///./src/containers/views/SocketDebugger/Browse/index.scss","webpack:///./src/containers/views/SocketDebugger/index.scss","webpack:///./src/containers/views/SocketDebugger/Handler/Type.tsx","webpack:///./src/containers/views/SocketDebugger/Handler/DataFormat.tsx","webpack:///./src/services/websocket/socketIO.ts","webpack:///./src/services/websocket/websocket.ts","webpack:///./src/services/websocket/index.ts","webpack:///./src/containers/views/SocketDebugger/Handler/Connect.tsx","webpack:///./src/containers/views/SocketDebugger/Handler/Send.tsx","webpack:///./src/containers/views/SocketDebugger/Handler/index.tsx","webpack:///./src/containers/views/SocketDebugger/Browse/Message.tsx","webpack:///./src/containers/views/SocketDebugger/Browse/index.tsx","webpack:///./src/containers/views/SocketDebugger/index.tsx"],"names":["module","exports","observer","socketStore","useRootStore","Group","onChange","e","value","target","setSocketType","localStorage","setItem","LOCALSTORAGE_KEYS","SOCKET_TYPE","socketType","disabled","socketIsConnected","SOCKER_TYPES","map","s","Button","key","dataFormat","style","width","val","setDataFormat","DATA_FORMAT","DATA_FORMATS","d","Option","patch","socketioWildcard","io","Manager","socketInstance","socket","send","event","data","retry","this","connected","emit","setTimeout","open","url","transports","notSupportPolling","unshift","connect","reconnectionDelay","reconnection","reconnectionAttempts","reaction","_","r","close","dispose","on","attemptNumber","text","addMessage","from","reason","setSocketIsConnected","timeout","err","console","warn","pkg","log","Array","length","socketConnect","error","reopenTimer","disconnectInitiative","Socket","EventEmitter","constructor","super","onopen","onmessage","conn","run","msg","JSON","stringify","readyState","OPEN","WebSocket","onclose","evt","code","clearTimeout","window","onerror","isSocketIO","socketConnectFromSocketIO","socketConnectFromWebsocket","socketDisconnect","sendFromSocketIO","sendFromWebsocket","React","useState","getItem","SOCKET_URL","setUrl","className","styles","container","socketUrlInput","checkbox","checked","setNotSupportPolling","btn","type","onClick","destroy","clearMessages","tips","localSocketIOEvents","SOCKET_IO_EVENTS","initialSocketIOEvents","parse","slice","content","setContent","textContent","setTextContent","jsonContent","setJsonContent","socketIOEvent","setSocketIOEvent","socketIOEvents","setSocketIOEvents","modalVisible","setModalVisible","canSend","useMemo","sendingContent","toggleModalVisible","visible","autoComplete","dataSource","placeholder","filterOption","inputValue","option","props","children","toUpperCase","includes","reset","placement","title","onConfirm","btnCover","top","onOk","onCancel","TextArea","autoSize","minRows","maxRows","name","theme","padding","minHeight","maxHeight","overflow","borderRadius","wordWrap","wordBreak","onAdd","uSrc","updated_src","onEdit","onDelete","src","block","size","newSocketIOEvents","Handler","handler","head","message","selfStore","useLocalStore","moment","time","format","messageHeader","marginBottom","color","fromText","vList","useRef","measureCache","CellMeasurerCache","fixedWidth","handleMessagesChanged","len","clearAll","current","scrollToRow","renderItem","index","parent","item","messages","CellMeasurer","cache","columnIndex","rowIndex","useOnMount","rowCount","browse","AutoSizer","height","ref","overscanRowCount","deferredMeasurementCache","rowHeight","rowRenderer","SocketDebugger"],"mappings":"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","file":"static/js/socket-debugger.16.573c6c4e8d837f2462ed.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"handler\":\"handler--33lmYD_l\",\"head\":\"head--_i6MLAIb\",\"reset\":\"reset--3ipKCEtw\",\"autoComplete\":\"autoComplete--2QkmBYRp\",\"btnCover\":\"btnCover--3nkeFAiQ\",\"content\":\"content--bs0srol_\",\"textContent\":\"textContent--1s4lUJzJ\",\"container\":\"container--1zGFaRPo\",\"socketUrlInput\":\"socketUrlInput---Nx70rT2\",\"connect\":\"connect--1nXEK20A\",\"btn\":\"btn--1Q32aFEv\",\"checkbox\":\"checkbox--qyRh0Ue- btn--1Q32aFEv\",\"tips\":\"tips--MwTJx_oS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"browse\":\"browse--1Z8yXncC\",\"message\":\"message--2vMGgree\",\"messageHeader\":\"messageHeader--QDKhDvI9\",\"content\":\"content--pK3X7czS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container--1_yRc3V0\"};","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Radio } from 'antd'\nimport { RadioChangeEvent } from 'antd/lib/radio'\n\nimport useRootStore from '@store/useRootStore'\nimport { LOCALSTORAGE_KEYS } from '@constants/index'\nimport { SOCKER_TYPES } from '@constants/socket'\n\nfunction Type() {\n    const { socketStore } = useRootStore()\n\n    function handleTypeChange(e: RadioChangeEvent) {\n        const { value } = e.target\n        socketStore.setSocketType(value)\n        localStorage.setItem(LOCALSTORAGE_KEYS.SOCKET_TYPE, value)\n    }\n    return (\n        <Radio.Group\n            onChange={handleTypeChange}\n            value={socketStore.socketType}\n            disabled={socketStore.socketIsConnected}\n        >\n            {SOCKER_TYPES.map(s => (\n                <Radio.Button value={s} key={s}>\n                    {s}\n                </Radio.Button>\n            ))}\n        </Radio.Group>\n    )\n}\n\nexport default observer(Type)\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Select } from 'antd'\n\nimport useRootStore from '@store/useRootStore'\nimport { LOCALSTORAGE_KEYS } from '@constants/index'\nimport { DATA_FORMATS } from '@constants/socket'\n\nfunction DataFormat() {\n    const { socketStore } = useRootStore()\n\n    function handleChange(val: ISocketStore.DataFormatType) {\n        socketStore.setDataFormat(val)\n        localStorage.setItem(LOCALSTORAGE_KEYS.DATA_FORMAT, val)\n    }\n    return (\n        <Select<ISocketStore.DataFormatType>\n            value={socketStore.dataFormat}\n            style={{ width: 120 }}\n            onChange={handleChange}\n        >\n            {DATA_FORMATS.map(d => (\n                <Select.Option key={d} value={d}>\n                    {d}\n                </Select.Option>\n            ))}\n        </Select>\n    )\n}\n\nexport default observer(DataFormat)\n","import io from 'socket.io-client'\nimport socketioWildcard from 'socketio-wildcard'\nimport { message } from 'antd'\nimport { reaction } from 'mobx'\n\nimport { socketStore } from '@store/index'\n\nconst patch = socketioWildcard(io.Manager)\n\n/**\n * socket 通信\n *\n * @export\n * @class Socket\n */\nclass Socket {\n    socket: SocketIOClient.Socket\n\n    send(event: string, data: any, retry = 0) {\n        if (this.socket && this.socket.connected) {\n            this.socket.emit(event, data)\n        } else if (retry < 3) {\n            setTimeout(() => {\n                this.send(data, retry++)\n            }, 300)\n        }\n    }\n\n    open(url: string) {\n        const transports = ['websocket']\n        if (!socketStore.notSupportPolling) {\n            transports.unshift('polling')\n        }\n        this.socket = io.connect(url, {\n            reconnectionDelay: 1000,\n            reconnection: true,\n            reconnectionAttempts: 5,\n            transports\n        })\n\n        patch(this.socket)\n\n        reaction(\n            () => socketStore.socketType,\n            (_, r) => {\n                this.socket.close()\n                r.dispose()\n            }\n        )\n\n        this.socket.on('reconnect', attemptNumber => {\n            const text = `socket reconnect after attempt ${attemptNumber} times !!!`\n            socketStore.addMessage({\n                event: 'reconnect',\n                from: 'console',\n                data: text\n            })\n        })\n\n        // 被断开, 不重连\n        this.socket.on('disconnect', reason => {\n            socketStore.setSocketIsConnected(false)\n            const text = `socket disconnect because: ${reason} !!!`\n            socketStore.addMessage({\n                event: 'disconnect',\n                from: 'console',\n                data: text\n            })\n        })\n\n        this.socket.on('connect_timeout', timeout => {\n            const text = `socket connect_timeout: ${timeout} !!!`\n            socketStore.addMessage({\n                event: 'connect_timeout',\n                from: 'console',\n                data: text\n            })\n        })\n\n        // 连接错误\n        this.socket.on('connect_error', err => {\n            const text = 'socket connect_error !!!'\n            socketStore.addMessage({\n                event: 'connect_error',\n                from: 'console',\n                data: text\n            })\n            console.warn(err)\n        })\n\n        // 错误捕获\n        this.socket.on('error', err => {\n            socketStore.setSocketIsConnected(false)\n            const text = 'socket error !!!'\n            socketStore.addMessage({\n                event: 'error',\n                from: 'console',\n                data: text\n            })\n            console.warn(err)\n        })\n\n        this.socket.on('connect', () => {\n            socketStore.setSocketIsConnected(true)\n            const text = 'socket connected !!!'\n            socketStore.addMessage({\n                event: 'connect',\n                from: 'console',\n                data: text\n            })\n        })\n\n        this.socket.on('ping', () => {\n            socketStore.addMessage({\n                event: 'ping',\n                from: 'browser',\n                data: null\n            })\n        })\n\n        this.socket.on('pong', () => {\n            socketStore.addMessage({\n                event: 'pong',\n                from: 'server',\n                data: null\n            })\n        })\n\n        this.socket.on('*', pkg => {\n            console.log('on all socket callback: ', pkg)\n            if (pkg && pkg.data instanceof Array && pkg.data.length > 1) {\n                const event = pkg.data[0]\n                const data = pkg.data[1]\n                socketStore.addMessage({\n                    event,\n                    from: 'server',\n                    data\n                })\n            }\n        })\n    }\n}\n\nconst socketInstance = new Socket()\n\nfunction canSocketOpen() {\n    return !(socketInstance.socket && socketInstance.socket.connected)\n}\n\nexport function socketConnect(url: string) {\n    if (!canSocketOpen()) {\n        return message.error('Please disconnect the existing instance!!!')\n    }\n    socketInstance.open(url)\n}\n\nexport function socketDisconnect() {\n    if (socketInstance.socket && socketInstance.socket.connected) {\n        socketInstance.socket.close()\n    }\n}\n\nexport function send(event: string, data: any) {\n    if (!socketInstance.socket || !socketInstance.socket.connected) {\n        return message.error('Please connect to server!!!')\n    }\n    socketInstance.send(event, data)\n    socketStore.addMessage({\n        event,\n        from: 'browser',\n        data\n    })\n}\n","import { EventEmitter } from 'eventemitter3'\nimport { message } from 'antd'\nimport { reaction } from 'mobx'\n\nimport { socketStore } from '@store/index'\n\nlet reopenTimer: number = null\n// 是否主动断开\nlet disconnectInitiative = false\n\ninterface SocketMsg {\n    data: any\n}\n\n/**\n * socket 通信\n *\n * @export\n * @class Socket\n */\nclass Socket extends EventEmitter {\n    onopen: () => void\n    onmessage: (msg: SocketMsg) => void\n    conn: WebSocket = null\n\n    constructor() {\n        super()\n        this.run()\n    }\n\n    run() {\n        this.onopen = () => {\n            const text = 'socket connected !!!'\n            socketStore.setSocketIsConnected(true)\n            socketStore.addMessage({\n                event: 'connect',\n                from: 'console',\n                data: text\n            })\n        }\n\n        this.onmessage = (msg: SocketMsg) => {\n            if (!msg || !msg.data) {\n                return\n            }\n            socketStore.addMessage({\n                event: 'message',\n                from: 'server',\n                data: typeof msg.data === 'object' ? JSON.stringify(msg.data) : msg.data\n            })\n        }\n    }\n\n    send(data: any, retry = 0) {\n        if (this.conn && this.conn.readyState === this.conn.OPEN) {\n            this.conn.send(typeof data === 'object' ? JSON.stringify(data) : data)\n        } else if (retry < 3) {\n            setTimeout(() => {\n                this.send(data, retry++)\n            }, 300)\n        }\n    }\n\n    open(url: string) {\n        this.conn = new WebSocket(url)\n        this.conn.onclose = evt => {\n            socketStore.setSocketIsConnected(false)\n            const text = `socket close: ${typeof evt === 'object' ? evt.code : ''}`\n            socketStore.addMessage({\n                event: 'close',\n                from: 'console',\n                data: text\n            })\n            clearTimeout(reopenTimer)\n            if (!disconnectInitiative) {\n                reopenTimer = window.setTimeout(() => {\n                    this.open(url)\n                }, 3000)\n            }\n            disconnectInitiative = false\n        }\n        this.conn.onerror = evt => {\n            socketStore.setSocketIsConnected(false)\n            const text = `socket error: ${typeof evt === 'object' ? JSON.stringify((evt as any).code) : ''}`\n            socketStore.addMessage({\n                event: 'error',\n                from: 'console',\n                data: text\n            })\n        }\n\n        reaction(\n            () => socketStore.socketType,\n            (_, r) => {\n                clearTimeout(reopenTimer)\n                r.dispose()\n            }\n        )\n\n        if (this.onopen) {\n            this.conn.onopen = this.onopen\n        }\n        if (this.onmessage) {\n            this.conn.onmessage = this.onmessage\n        }\n        return this\n    }\n}\n\nconst socketInstance = new Socket()\n\nfunction canSocketOpen() {\n    return !(socketInstance.conn && socketInstance.conn.readyState === socketInstance.conn.OPEN)\n}\n\nexport function socketConnect(url: string) {\n    if (!canSocketOpen()) {\n        return message.error('Please disconnect the existing instance!!!')\n    }\n    socketInstance.open(url)\n}\n\nexport function socketDisconnect() {\n    if (socketInstance.conn && socketInstance.conn.readyState === socketInstance.conn.OPEN) {\n        socketInstance.conn.close()\n    }\n    disconnectInitiative = true\n}\n\nexport function send(_, data: any) {\n    if (!socketInstance.conn && socketInstance.conn.readyState !== socketInstance.conn.OPEN) {\n        return message.error('Please connect to server!!!')\n    }\n    socketInstance.send(data)\n    socketStore.addMessage({\n        event: null,\n        from: 'browser',\n        data\n    })\n}\n","import { socketStore } from '@store/index'\nimport {\n    socketConnect as socketConnectFromSocketIO,\n    socketDisconnect as socketDisconnectFromSocketIO,\n    send as sendFromSocketIO\n} from './socketIO'\nimport {\n    socketConnect as socketConnectFromWebsocket,\n    socketDisconnect as socketDisconnectFromWebsocket,\n    send as sendFromWebsocket\n} from './websocket'\n\nexport const socketConnect = (url: string) => {\n    return socketStore.isSocketIO ? socketConnectFromSocketIO(url) : socketConnectFromWebsocket(url)\n}\n\nexport const socketDisconnect = () => {\n    return socketStore.isSocketIO ? socketDisconnectFromSocketIO() : socketDisconnectFromWebsocket()\n}\n\nexport const send = (event: string, data: any) => {\n    return socketStore.isSocketIO ? sendFromSocketIO(event, data) : sendFromWebsocket(event, data)\n}\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { message, Input, Button, Checkbox } from 'antd'\n\nimport styles from './index.scss'\nimport useRootStore from '@store/useRootStore'\nimport { socketConnect, socketDisconnect } from '@services/websocket'\nimport { LOCALSTORAGE_KEYS } from '@constants/index'\n\nfunction Connect() {\n    const { socketStore } = useRootStore()\n\n    const [url, setUrl] = React.useState(localStorage.getItem(LOCALSTORAGE_KEYS.SOCKET_URL))\n\n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        const { value } = e.target\n        setUrl(value)\n        localStorage.setItem(LOCALSTORAGE_KEYS.SOCKET_URL, value)\n    }\n\n    function handleConnect() {\n        if (!url) {\n            message.destroy()\n            return message.error('Please input socket url!')\n        }\n        socketConnect(url)\n        socketStore.clearMessages()\n    }\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.connect}>\n                <Input className={styles.socketUrlInput} value={url} onChange={handleChange} />\n                {socketStore.isSocketIO && (\n                    <Checkbox\n                        disabled={socketStore.socketIsConnected}\n                        className={styles.checkbox}\n                        checked={socketStore.notSupportPolling}\n                        onChange={e => socketStore.setNotSupportPolling(e.target.checked)}\n                    >\n                        no polling\n                    </Checkbox>\n                )}\n                <Button\n                    className={styles.btn}\n                    type=\"primary\"\n                    onClick={handleConnect}\n                    disabled={socketStore.socketIsConnected}\n                >\n                    connect\n                </Button>\n                <Button\n                    className={styles.btn}\n                    type=\"danger\"\n                    onClick={socketDisconnect}\n                    disabled={!socketStore.socketIsConnected}\n                >\n                    disconnect\n                </Button>\n            </div>\n            <blockquote className={styles.tips}>\n                protocol//ip or domain:host (example:{' '}\n                {socketStore.isSocketIO ? 'wss://showcase.jackple.com' : 'ws://127.0.0.1:3001'})\n            </blockquote>\n        </div>\n    )\n}\n\nexport default observer(Connect)\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Button, AutoComplete, Popconfirm, Modal, Input, message } from 'antd'\nimport ReactJson from 'react-json-view'\n\nimport styles from './index.scss'\nimport useRootStore from '@store/useRootStore'\nimport { LOCALSTORAGE_KEYS } from '@constants/index'\nimport { DATA_FORMATS } from '@constants/socket'\nimport { send } from '@services/websocket'\n\nconst localSocketIOEvents = localStorage.getItem(LOCALSTORAGE_KEYS.SOCKET_IO_EVENTS)\nlet initialSocketIOEvents: string[] = localSocketIOEvents ? JSON.parse(localSocketIOEvents) : []\nif (initialSocketIOEvents.length > 30) {\n    initialSocketIOEvents = initialSocketIOEvents.slice(0, 30)\n}\n\nfunction Send() {\n    const { socketStore } = useRootStore()\n\n    const [content, setContent] = React.useState('')\n    const [textContent, setTextContent] = React.useState('')\n    const [jsonContent, setJsonContent] = React.useState<PlainObject>({})\n    const [socketIOEvent, setSocketIOEvent] = React.useState('')\n    const [socketIOEvents, setSocketIOEvents] = React.useState(initialSocketIOEvents)\n    const [modalVisible, setModalVisible] = React.useState(false)\n\n    const canSend = React.useMemo(() => {\n        if (socketStore.isSocketIO && !socketIOEvent) {\n            return false\n        }\n        return socketStore.socketIsConnected\n    }, [socketStore.isSocketIO, socketIOEvent, socketStore.socketIsConnected])\n\n    const sendingContent = React.useMemo(\n        () => (socketStore.dataFormat === DATA_FORMATS[0] ? jsonContent : textContent),\n        [socketStore.dataFormat, jsonContent, textContent]\n    )\n\n    function toggleModalVisible() {\n        setModalVisible(visible => !visible)\n    }\n\n    function handleOK() {\n        try {\n            setJsonContent(JSON.parse(content))\n            toggleModalVisible()\n        } catch (err) {\n            console.error(err)\n            message.destroy()\n            message.error('Please input json string!')\n        }\n    }\n\n    function handleSubmit() {\n        if (!socketStore.isSocketIO) {\n            return send(null, sendingContent)\n        } else if (!socketIOEvent) {\n            message.destroy()\n            return message.error('Please input event name!')\n        }\n        if (!socketIOEvents.includes(socketIOEvent)) {\n            const newSocketIOEvents = [socketIOEvent, ...socketIOEvents]\n            setSocketIOEvents(newSocketIOEvents)\n            localStorage.setItem(LOCALSTORAGE_KEYS.SOCKET_IO_EVENTS, JSON.stringify(newSocketIOEvents))\n        }\n        send(socketIOEvent, sendingContent)\n    }\n\n    return (\n        <div>\n            {socketStore.isSocketIO && (\n                <AutoComplete\n                    className={styles.autoComplete}\n                    dataSource={socketIOEvents}\n                    placeholder=\"Input event name\"\n                    value={socketIOEvent}\n                    onChange={e => setSocketIOEvent(e as string)}\n                    filterOption={(inputValue, option) =>\n                        (option.props.children as string).toUpperCase().includes(inputValue.toUpperCase())\n                    }\n                />\n            )}\n            {socketStore.dataFormat === DATA_FORMATS[0] ? (\n                <div className={styles.content}>\n                    <div className={styles.reset}>\n                        <Popconfirm placement=\"topLeft\" title=\"Confirm to reset?\" onConfirm={() => setJsonContent({})}>\n                            <Button>Reset</Button>\n                        </Popconfirm>\n                        <Button className={styles.btnCover} type=\"primary\" onClick={toggleModalVisible}>\n                            Custom\n                        </Button>\n                        <Modal\n                            title=\"Custom data\"\n                            style={{ top: 20 }}\n                            visible={modalVisible}\n                            onOk={handleOK}\n                            onCancel={toggleModalVisible}\n                        >\n                            <Input.TextArea\n                                placeholder=\"Please input json string\"\n                                autoSize={{ minRows: 4, maxRows: 10 }}\n                                value={content}\n                                onChange={({ target }) => setContent(target.value)}\n                            />\n                        </Modal>\n                    </div>\n                    <ReactJson\n                        name={false}\n                        theme=\"monokai\"\n                        style={{\n                            padding: 10,\n                            minHeight: 150,\n                            maxHeight: 500,\n                            overflow: 'auto',\n                            borderRadius: 3,\n                            wordWrap: 'break-word',\n                            wordBreak: 'break-all'\n                        }}\n                        onAdd={({ updated_src: uSrc }) => setJsonContent(uSrc)}\n                        onEdit={({ updated_src: uSrc }) => setJsonContent(uSrc)}\n                        onDelete={({ updated_src: uSrc }) => setJsonContent(uSrc)}\n                        src={jsonContent}\n                    />\n                </div>\n            ) : (\n                <Input.TextArea\n                    className={styles.textContent}\n                    placeholder=\"Input your sending content\"\n                    autoSize={{ minRows: 4, maxRows: 10 }}\n                    value={textContent}\n                    onChange={({ target }) => setTextContent(target.value)}\n                />\n            )}\n            <Button block size=\"large\" disabled={!canSend} type=\"primary\" onClick={handleSubmit}>\n                Send\n            </Button>\n        </div>\n    )\n}\n\nexport default observer(Send)\n","import React from 'react'\n\nimport styles from './index.scss'\nimport Type from './Type'\nimport DataFormat from './DataFormat'\nimport Connect from './Connect'\nimport Send from './Send'\n\nfunction Handler() {\n    return (\n        <div className={styles.handler}>\n            <div className={styles.head}>\n                <Type />\n                <DataFormat />\n            </div>\n            <Connect />\n            <Send />\n        </div>\n    )\n}\n\nexport default Handler\n","import React from 'react'\nimport { observer, useLocalStore } from 'mobx-react'\nimport moment from 'moment'\nimport { Tag } from 'antd'\n\nimport styles from './index.scss'\n\ninterface IProps {\n    message: ISocketStore.Message\n    style: React.CSSProperties\n}\n\nfunction Message({ message, style }: IProps) {\n    const selfStore = useLocalStore(() => ({\n        get time() {\n            return moment(message.time).format('h:mm:ss a')\n        },\n        get color() {\n            if (message.from === 'browser') {\n                return '#87d068'\n            } else if (message.from === 'server') {\n                return '#2db7f5'\n            }\n            return '#108ee9'\n        },\n        get fromText() {\n            if (message.from === 'browser') {\n                return 'You'\n            } else if (message.from === 'server') {\n                return 'Server'\n            }\n            return 'Console'\n        },\n        get content() {\n            if (!message.data) {\n                return null\n            }\n            return typeof message.data === 'object' ? JSON.stringify(message.data) : message.data\n        }\n    }))\n    return (\n        <div className={styles.message} style={style}>\n            <div className={styles.messageHeader} style={{ marginBottom: !!selfStore.content ? 5 : 0 }}>\n                {message.event && <Tag color=\"#f50\">{message.event}</Tag>}\n                <Tag color={selfStore.color}>{selfStore.fromText}</Tag>\n                <span>{selfStore.time}</span>\n            </div>\n            <div className={styles.content}>{selfStore.content}</div>\n        </div>\n    )\n}\n\nexport default observer(Message)\n","import React from 'react'\nimport { reaction } from 'mobx'\nimport { observer } from 'mobx-react'\nimport { AutoSizer } from 'react-virtualized/dist/es/AutoSizer'\nimport { CellMeasurerCache, CellMeasurer } from 'react-virtualized/dist/es/CellMeasurer'\nimport { List as VList, ListRowProps } from 'react-virtualized/dist/es/List'\n\nimport styles from './index.scss'\nimport useRootStore from '@store/useRootStore'\nimport { useOnMount } from '@utils/hooks'\nimport Message from './Message'\n\nfunction Browse() {\n    const { socketStore } = useRootStore()\n\n    const vList = React.useRef<VList>(null)\n    const measureCache = new CellMeasurerCache({\n        fixedWidth: true,\n        minHeight: 43\n    })\n\n    function handleMessagesChanged(len: number) {\n        if (len === 0) {\n            return measureCache.clearAll()\n        }\n        if (vList.current) {\n            vList.current.scrollToRow(len - 1)\n        }\n    }\n\n    function listenMessagesLen() {\n        return reaction(() => socketStore.messages.length, handleMessagesChanged)\n    }\n\n    useOnMount(listenMessagesLen)\n\n    function renderItem({ index, key, parent, style }: ListRowProps) {\n        const item = socketStore.messages[index]\n        return (\n            <CellMeasurer cache={measureCache} columnIndex={0} key={key} parent={parent} rowIndex={index}>\n                <Message style={style} message={item} />\n            </CellMeasurer>\n        )\n    }\n    const rowCount = socketStore.messages.length\n    return (\n        <div className={styles.browse}>\n            <AutoSizer>\n                {({ width, height }) => (\n                    <VList\n                        width={width}\n                        height={height}\n                        ref={vList}\n                        overscanRowCount={0}\n                        rowCount={rowCount}\n                        deferredMeasurementCache={measureCache}\n                        rowHeight={measureCache.rowHeight}\n                        rowRenderer={renderItem}\n                    />\n                )}\n            </AutoSizer>\n        </div>\n    )\n}\n\nexport default observer(Browse)\n","import React from 'react'\n\nimport styles from './index.scss'\nimport Handler from './Handler'\nimport Browse from './Browse'\n\nfunction SocketDebugger() {\n    return (\n        <div className={styles.container}>\n            <Handler />\n            <Browse />\n        </div>\n    )\n}\n\nexport default SocketDebugger\n"],"sourceRoot":""}